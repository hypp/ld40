<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
      <title>LD 40 - The more you have, the worse it is</title>

      <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cannon.js/0.6.2/cannon.min.js"></script>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://code.jquery.com/pep/0.4.1/pep.js"></script>

   </head>

   <body>

    <canvas id="renderCanvas" touch-action="none"></canvas> //touch-action="none" for best results from PEP

    <script>

        var keys={
            letft:false,
            right:false,
            forward:false,
            back:false
        };
        window.addEventListener("keydown", handleKeyDown, false);
        window.addEventListener("keyup", handleKeyUp, false);
        function handleKeyDown(evt){    
            if (evt.keyCode==65 || evt.keyCode==37) {
                //A or left arrow
                if (keys.right == true) {
                    keys.right = false;
                } else {
                    keys.left=true;
                }
            }    
            if (evt.keyCode==68 || evt.keyCode==39) {
                //D or right arrow
                if (keys.left == true) {
                    keys.left = false;
                } else {
                    keys.right=true;    
                }
            }    
            if (evt.keyCode==87 || evt.keycode==32 || evt.keyCode==38) {
                //W or space or up arrow
                keys.forward=true;    
            }    
        }
        function handleKeyUp(evt) {
            /*    
            if (evt.keyCode==65) {        
                keys.left=false;    
            }    
            if (evt.keyCode==68) {
                keys.right=false;    
            }    
            if (evt.keyCode==87) {        
                //keys.forward=false;    
            }    
            if (evt.keyCode==83) {        
                keys.back=false;    
            }
            */
        }

        var roadWidth = 15.0;
        var roadCenter = 40;
        var roadInnerBorder = roadCenter - roadWidth/2.0;
        var roadOuterBorder = roadCenter + roadWidth/2.0;

            var canvas = document.getElementById("renderCanvas"); // Get the canvas element 

            var engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine


            var createRoad = function (scene) {
                var greyMaterial = new BABYLON.StandardMaterial("greyGroundMat", scene);
                greyMaterial.diffuseColor = new BABYLON.Color3(0.5, 0.5, 0.5);
                greyMaterial.backFaceCulling = false;
                var greySegment = BABYLON.Mesh.CreatePlane("greyGround", roadWidth, scene);
                greySegment.material = greyMaterial;
                greySegment.setEnabled(false);

                var darkgreyMaterial = new BABYLON.StandardMaterial("darkgreyGroundMat", scene);
                darkgreyMaterial.diffuseColor = new BABYLON.Color3(0.3, 0.3, 0.3);
                darkgreyMaterial.backFaceCulling = false;
                var darkgreySegment = BABYLON.Mesh.CreatePlane("darkgreyGround", roadWidth, scene);
                darkgreySegment.material = darkgreyMaterial;
                darkgreySegment.setEnabled(false);

                // Circular race track
                var x = roadCenter; // meters from origo => radius
                var y = 0; // ground
                var z = 0; // first segment of the road

                var numSegments = 20;
                var angleIncrement = 360.0 / numSegments;
                var angle = 0.0;

                for (let index = 0; index < numSegments; index++) {
                    var angleRadians = angle * Math.PI / 180.0;

                    var xp = z*Math.sin(angleRadians) + x*Math.cos(angleRadians);
                    var yp = y
                    var zp = z*Math.cos(angleRadians) - x*Math.sin(angleRadians);

                    var segment;
                    if (index % 1 == 0) {
                        segment = darkgreySegment.createInstance("index" + index);
                    } else {
                        segment = greySegment.createInstance("index" + index);
                    }
                    segment.position = new BABYLON.Vector3(xp, yp, zp);
                    segment.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL);
                    segment.rotate(BABYLON.Axis.Z, -angleRadians, BABYLON.Space.LOCAL);                    
                    segment.setEnabled(true);
                    //segment.physicsImpostor = new BABYLON.PhysicsImpostor(segment, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.9 }, scene);

                    angle += angleIncrement;
                }
            }

            var player;
            var playerTorso;

            var createPlayer = function(scene) {
                var snow = new BABYLON.StandardMaterial("snow", scene);
                snow.diffuseTexture = new BABYLON.Texture("snow.png", scene);
                snow.specularTexture = new BABYLON.Texture("snow.png", scene);
                snow.emissiveTexture = new BABYLON.Texture("snow.png", scene);
                snow.ambientTexture = new BABYLON.Texture("snow.png", scene);

                var carrot = new BABYLON.StandardMaterial("carrot", scene);
                carrot.diffuseTexture = new BABYLON.Texture("carrot.png", scene);
                carrot.specularTexture = new BABYLON.Texture("carrot.png", scene);
                carrot.emissiveTexture = new BABYLON.Texture("carrot.png", scene);
                carrot.ambientTexture = new BABYLON.Texture("carrot.png", scene);

                var playerRadius = 0.8;
                var playerDiameter = playerRadius*2;
                player = BABYLON.MeshBuilder.CreateSphere("player", {diameter: playerDiameter}, scene);
                player.position = new BABYLON.Vector3(35, playerRadius, 0);
                //player.physicsImpostor = new BABYLON.PhysicsImpostor(player, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);
                player.material = snow;

                var torsoRadius = playerRadius*0.75;
                var torsoDiameter = torsoRadius*2;
                var playerTorso = BABYLON.MeshBuilder.CreateSphere("playerTorso", {diameter: torsoDiameter}, scene);
                playerTorso.parent = player;
                playerTorso.position = new BABYLON.Vector3(0, playerRadius+torsoRadius, 0);
                playerTorso.material = snow;
                //playerTorso.physicsImpostor = new BABYLON.PhysicsImpostor(playerTorso, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);

                var headRadius = torsoRadius*0.75;
                var headDiameter = headRadius*2;
                playerHead = BABYLON.MeshBuilder.CreateSphere("playerHead", {diameter: headDiameter}, scene);
                playerHead.parent = playerTorso;
                playerHead.position = new BABYLON.Vector3(0, torsoRadius+headRadius, 0);
                playerHead.material = snow;
                //playerHead.physicsImpostor = new BABYLON.PhysicsImpostor(playerHead, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);

                var noseRadius = 0.025;
                var noseDiameter = noseRadius*2;
                playerNose = BABYLON.MeshBuilder.CreateSphere("playerNose", {diameter: noseDiameter}, scene);
                playerNose.parent = playerHead;
                playerNose.position = new BABYLON.Vector3(0, 0, (headRadius+noseRadius)*-1.0);
                playerNose.material = carrot;
                //playerNose.physicsImpostor = new BABYLON.PhysicsImpostor(playerNose, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);

                //playerHead.physicsImpostor.createJoint(playerTorso.physicsImpostor, BABYLON.PhysicsJoint.DistanceJoint, {});
                //playerTorso.physicsImpostor.createJoint(player.physicsImpostor, BABYLON.PhysicsJoint.DistanceJoint, {});

                player.alive = true;
            }

            var allBeers = [];

            var createBeer = function(scene) {
                var beerMaterial = new BABYLON.StandardMaterial("beer", scene);
                beerMaterial.diffuseTexture = new BABYLON.Texture("beer.png", scene);
                beerMaterial.specularTexture = new BABYLON.Texture("beer.png", scene);
                beerMaterial.emissiveTexture = new BABYLON.Texture("beer.png", scene);
                beerMaterial.ambientTexture = new BABYLON.Texture("beer.png", scene);
                beerMaterial.diffuseTexture.hasAlpha = true;
                beerMaterial.specularTexture.hasAlpha = true;
                beerMaterial.emissiveTexture.hasAlpha = true;
                beerMaterial.ambientTexture.hasAlpha = true;
                beerMaterial.backFaceCulling = false;

                var beerTemplate = BABYLON.MeshBuilder.CreatePlane("beer", 0.1, scene);
                
                beerTemplate.material = beerMaterial;
                beerTemplate.setEnabled(false);

                var x = -roadCenter;
                var y = 0.5;
                var z = 0;
                
                numBeers = 20;
                var angleIncrement = 360.0 / numBeers;
                var angle = 0.0;
                for (let index = 0; index < numBeers; index++) {
                    var angleRadians = angle * Math.PI / 180.0;

                    var xp = z*Math.sin(angleRadians) + x*Math.cos(angleRadians);
                    var yp = y
                    var zp = z*Math.cos(angleRadians) - x*Math.sin(angleRadians);

                    var beer = beerTemplate.createInstance("beerindex" + index);
                    beer.position = new BABYLON.Vector3(xp, yp, zp);
                    beer.rotate(BABYLON.Axis.Y, angleRadians, BABYLON.Space.LOCAL);                    
                    beer.setEnabled(true);
                    //beer.physicsImpostor = new BABYLON.PhysicsImpostor(beer, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, restitution: 0.9 }, scene);

                    allBeers.push(beer);

                    angle += angleIncrement;

                }
            }

            /******* Add the create scene function ******/
            var createScene = function () {

                var scene = new BABYLON.Scene(engine);
                //scene.enablePhysics();
                
                    // Lights
                    var light0 = new BABYLON.DirectionalLight("Omni", new BABYLON.Vector3(-2, -5, 2), scene);
                    var light = new BABYLON.HemisphericLight("HemiLight", new BABYLON.Vector3(0, 1, 0), scene);

                    createRoad(scene);
                    createPlayer(scene);
                    createBeer(scene);

                    // Parameters: name, position, scene    
                    var camera = new BABYLON.FollowCamera("FollowCam", new BABYLON.Vector3(0, 10, -10), scene);

                    camera.radius = 6;
                    camera.heightOffset = 3;
                    camera.rotationOffset = 0;
                    camera.cameraAcceleration = 0.05
                    camera.lockedTarget = player; //version 2.5 onwards

                    scene.clearColor = new BABYLON.Color3(0.0, 0.0, 0.1);

                        return scene;
                };

                /******* End of the create scene function ******/    

            var scene = createScene(); //Call the createScene function

            //var music = new BABYLON.Sound("Music", "music.wav", scene, null, { loop: true, autoplay: true });
            var klunks = [];
            for (let index = 1; index < 6; index++) {
                klunk = new BABYLON.Sound("klunk" + index, "klunk" + index + ".wav", scene)
                klunks.push(klunk);                
            }
            var falling = new BABYLON.Sound("falling", "fallingdown.wav", scene)
            
            var score = 0.0;

            var playerAngle = 0.0;
            engine.runRenderLoop(function () { // Register a render loop to repeatedly render the scene

                var rotationSpeed = Math.max(0.7, score / 5); 

                if (keys.left == true) {
                    playerAngle = (playerAngle - rotationSpeed) % 360;
                }
                if (keys.right == true) {
                    playerAngle = (playerAngle + rotationSpeed) % 360;
                }

                var angleRadians = playerAngle * Math.PI / 180.0;
                var xp = 1000*Math.sin(angleRadians) + 1000*Math.cos(angleRadians);
                var yp = 1
                var zp = 1000*Math.cos(angleRadians) - 1000*Math.sin(angleRadians);
                var directionVector = new BABYLON.Vector3(xp,yp,zp);
                directionVector = directionVector.subtract(player.position);
                player.lookAt(directionVector);
                

                if (keys.forward==1) {
                    unitvector = directionVector.normalize();		
                    player.position.x += unitvector.x / 5;		
                    player.position.z += unitvector.z / 5;			
                }

                // Check if player died
                var tmp = new BABYLON.Vector3(player.position.x, 0, player.position.z);
                var magnitude = tmp.length();
                if (magnitude < roadInnerBorder || magnitude > roadOuterBorder) {
                    player.position.y -= 1 ; // Gravity
                    if (player.alive && !falling.isPlaying) {
                        falling.play();
                    }
                    player.alive = false;
                }

                var numDisabled = 0;

                for (let index = 0; index < allBeers.length; index++) {
                    const element = allBeers[index];
                    
                    if (element.isEnabled()) {

                        if (player.intersectsMesh(element, false)) {
                            element.setEnabled(false);
                            element.restartCount = 50*10;

                            var klunkIdx = Math.floor(Math.random() * klunks.length);
                            klunks[klunkIdx].play();

                            var particleSystem = new BABYLON.ParticleSystem("particles", 100, scene);
                            particleSystem.particleTexture = new BABYLON.Texture("beer.png", scene);
                            particleSystem.emitter = element.position;
                            particleSystem.disposeOnStop = true;
                            particleSystem.targetStopDuration = 1;
                            particleSystem.start();
                            score += 1;
                        }
                    } else {
                        element.restartCount -= 1;
                        if (element.restartCount < 0) {
                            element.setEnabled(true);
                        }
                    } // if isEnabled()
                } // for

                scene.render();
            });


            window.addEventListener("resize", function () { // Watch for browser/canvas resize events
                    engine.resize();
            });

            
    </script>

   </body>

</html>
